
vec2 add = vec2(1.0, 0.0);
#define HASHSCALE1 .1031

const mat2 rotate2D = mat2(1.3623, 1.7531, -1.7131, 1.4623);

//// Low-res stuff

float hash12(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * HASHSCALE1);
	p3 += dot(p3, p3.yzx + 19.19);
	return fract((p3.x + p3.y) * p3.z);
}

float noise(in vec2 x)
{
	vec2 p = floor(x);
	vec2 f = fract(x);
	f = f * f*(3.0 - 2.0*f);

	float res = mix(mix(hash12(p), hash12(p + add.xy), f.x),
		mix(hash12(p + add.yx), hash12(p + add.xx), f.x), f.y);
	return res;
}

float terrain(in vec2 p)
{
	vec2 pos = p * 0.05;
	float w = (noise(pos*.25)*0.75 + .15);
	w = 66.0 * w * w;
	vec2 dxy = vec2(0.0, 0.0);
	float f = .0;
	for (int i = 0; i < 5; i++)
	{
		f += w * noise(pos);
		w = -w * 0.4;
		pos = rotate2D * pos;
	}
	float ff = noise(pos*.002);

	f += pow(abs(ff), 5.0)*275. - 5.0;
	return f;
}

float height_to_surface(in vec3 p)
{
	float h = terrain(p.xz);

	return -p.y - h;
}

///////

//// High-res stuff
#define HASHSCALE3 vec3(.1031, .1030, .0973)
#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)

vec2 hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);
	p3 += dot(p3, p3.yzx + 19.19);
	return fract((p3.xx + p3.yz)*p3.zy);

}

vec2 noise2(in vec2 x)
{
	vec2 p = floor(x);
	vec2 f = fract(x);
	f = f * f*(3.0 - 2.0*f);
	float n = p.x + p.y * 57.0;
	vec2 res = mix(mix(hash22(p), hash22(p + add.xy), f.x),
		mix(hash22(p + add.yx), hash22(p + add.xx), f.x), f.y);
	return res;
}

//--------------------------------------------------------------------------
// High def version only used for grabbing normal information.
float terrain2(in vec2 p)
{
	// There's some real magic numbers in here! 
	// The noise calls add large mountain ranges for more variation over distances...
	vec2 pos = p * 0.05;
	float w = (noise(pos*.25)*0.75 + .15);
	w = 66.0 * w * w;
	vec2 dxy = vec2(0.0, 0.0);
	float f = .0;
	for (int i = 0; i < 5; i++)
	{
		f += w * noise(pos);
		w = -w * 0.4;	//...Flip negative and positive for varition	   
		pos = rotate2D * pos;
	}
	float ff = noise(pos*.002);
	f += pow(abs(ff), 5.0)*275. - 5.0;


	// That's the last of the low resolution, now go down further for the Normal data...
	for (int i = 0; i < 6; i++)
	{
		f += w * noise(pos);
		w = -w * 0.4;
		pos = rotate2D * pos;
	}

	return f;
}

///////

//// Coloring

vec3 sun_light = normalize(vec3(0.4, 0.4, 0.48));
vec3 sun_color = vec3(1.0, .9, .83);
float specular = 0.0;
float ambient;

// Calculate sun light...
void do_lighting(inout vec3 mat, in vec3 pos, in vec3 normal, in vec3 eye_dir, in float dis)
{
	float h = dot(sun_light, normal);
	float c = max(h, 0.0) + ambient;
	mat = mat * sun_color * c;
	// Specular...
	if (h > 0.0)
	{
		vec3 R = reflect(sun_light, normal);
		float spec_amount = pow(max(dot(R, normalize(eye_dir)), 0.0), 3.0)*specular;
		mat = mix(mat, sun_color, spec_amount);
	}
}

vec3 GetSky(in vec3 rd)
{
//	float sunAmount = max( dot( rd, sun_light), 0.0 );
//	float v = pow(1.0-max(-rd.y,0.0),5.)*.5;
//	vec3  sky = vec3(v*sun_color.x*0.4+0.18, v*sun_color.y*0.4+0.22, v*sun_color.z*0.4+.4);
//	// Wide glare effect...
//	sky = sky + sun_color * pow(sunAmount, 6.5)*.32;
//	// Actual sun...
//	sky = sky+ sun_color * min(pow(sunAmount, 1150.0), .3)*.65;
//	return sky;
	return vec3(0.1, 0.15, 0.3);
}

// Merge mountains into the sky background for correct disappearance...
vec3 ApplyFog( in vec3  rgb, in float dis, in vec3 dir)
{
	float fogAmount = exp(-dis* 0.00005);
	return mix(GetSky(dir), rgb, fogAmount);
}

// Hack the height, position, and normal data to create the coloured landscape
vec3 surface_color(vec3 pos, vec3 normal, float dis, vec3 cam_pos)
{
	vec3 mat;
	specular = .0;
	ambient = .1;
	vec3 dir = normalize(pos - cam_pos);

	vec3 mat_pos = pos * 2.0;// ... I had change scale halfway though, this lazy multiply allow me to keep the graphic scales I had

	float dis_sqrd = dis * dis;// Squaring it gives better distance scales.

	float f = clamp(noise(mat_pos.xz*.05), 0.0, 1.0);//*10.8;
	f += noise(mat_pos.xz*.1 + normal.yz*1.08)*.85;
	f *= .55;
	vec3 m = mix(vec3(.63*f + .2, .7*f + .1, .7*f + .1), vec3(f*.43 + .1, f*.3 + .2, f*.35 + .1), f*.65);
	mat = m * vec3(f*m.x + .36, f*m.y + .30, f*m.z + .28);
	// Should have used smoothstep to add colours, but left it using 'if' for sanity...
	if (normal.y < .5)
	{
		float v = normal.y;
		float c = (.5 - normal.y) * 4.0;
		c = clamp(c*c, 0.1, 1.0);
		f = noise(vec2(mat_pos.x*.09, mat_pos.z*.095 + mat_pos.yy*0.15));
		f += noise(vec2(mat_pos.x*2.233, mat_pos.z*2.23))*0.5;
		mat = mix(mat, vec3(.4*f), c);
		specular += .1;
	}

	// Grass. Use the normal to decide when to plonk grass down...
	if (normal.y > .65)
	{

		m = vec3(noise(mat_pos.xz*.023)*.5 + .15, noise(mat_pos.xz*.03)*.6 + .25, 0.0);
		m *= (normal.y - 0.65)*.6;
		mat = mix(mat, m, clamp((normal.y - .65)*1.3 * (45.35 - mat_pos.y)*0.1, 0.0, 1.0));
	}

	// Snow topped mountains...
	if (mat_pos.y > 80.0 && normal.y > .42)
	{
		float snow = clamp((mat_pos.y - 80.0 - noise(mat_pos.xz * .1)*28.0) * 0.035, 0.0, 1.0);
		mat = mix(mat, vec3(.7, .7, .8), snow);
		specular += snow;
		ambient += snow * .3;
	}

	do_lighting(mat, pos, normal, dir, dis_sqrd);

	float disSqrd = dis * dis;
	mat = ApplyFog(mat, disSqrd, dir);

	return mat;
}

// Some would say, most of the magic is done in post! :D
vec3 post_effects(vec3 rgb)
{
	return (1.0 - exp(-rgb * 6.0)) * 1.0024;
}

