#version 450 core

#define TERRAIN_SET 0
#define TERRAIN_BINDING 0
#include "terrain_buffer.include"
#include "terrain.include"
#include "circumcircle.include"

#define WORK_GROUP_SIZE 1024

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform frame_data_t
{
	mat4 camera_vp;
	vec4 camera_pos;
	vec2 min;
	vec2 max;
	uint node_index;
} frame_data;

const uint GRID_SIDE = TERRAIN_GENERATE_GRID_SIDE;




void main(void)
{
	const uint node_index = frame_data.node_index;

	if (gl_GlobalInvocationID.x == 0)
	{
		terrain_buffer.data[node_index].index_count = 6 * (GRID_SIDE - 1) * (GRID_SIDE - 1);
		terrain_buffer.data[node_index].instance_count = 1;
		terrain_buffer.data[node_index].first_index = 0;
		terrain_buffer.data[node_index].vertex_offset = 0;
		terrain_buffer.data[node_index].first_instance = 0;

		terrain_buffer.data[node_index].vertex_count = GRID_SIDE * GRID_SIDE;
		terrain_buffer.data[node_index].new_points_count = 0;

		terrain_buffer.data[node_index].min = frame_data.min;
		terrain_buffer.data[node_index].max = frame_data.max;
	}

	// Positions
	uint i = gl_GlobalInvocationID.x;
	while (i < GRID_SIDE * GRID_SIDE)
	{
		float x = frame_data.min.x + ((i % GRID_SIDE) / float(GRID_SIDE - 1)) * (frame_data.max.x - frame_data.min.x);
		float z = frame_data.min.y + float(i / GRID_SIDE) / float(GRID_SIDE - 1) * (frame_data.max.y - frame_data.min.y);

		terrain_buffer.data[node_index].positions[i] = vec4(x, -terrain(vec2(x, z)) - 0.5, z, 1.0);


		//if (x < 0 && z < 0 && i == 0)
		//{
		//	int max = 10;
		//	terrain_buffer.data[node_index].new_points_count = max * max;
		//	for (int a = 0; a < max; ++a)
		//	{
		//		for (int b = 0; b < max; ++b)
		//		{
		//			terrain_buffer.data[node_index].new_points[a * max + b] = vec4(-200 + a * 4, -100, -60 + b * 0.5, 1);
		//		}
		//	}
		//}

		i += WORK_GROUP_SIZE;
	}

	barrier();
	memoryBarrierBuffer();

	// Triangles
	i = gl_GlobalInvocationID.x; 
	while (i < (GRID_SIDE - 1) * (GRID_SIDE - 1))
	{
		uint y = i / (GRID_SIDE - 1);
		uint x = i % (GRID_SIDE - 1);
		uint index = y * GRID_SIDE + x;

		// Indices
		uint offset = i * 6;
		terrain_buffer.data[node_index].indices[offset] = index;
		terrain_buffer.data[node_index].indices[offset + 1] = index + GRID_SIDE + 1;
		terrain_buffer.data[node_index].indices[offset + 2] = index + 1;

		terrain_buffer.data[node_index].indices[offset + 3] = index;
		terrain_buffer.data[node_index].indices[offset + 4] = index + GRID_SIDE;
		terrain_buffer.data[node_index].indices[offset + 5] = index + GRID_SIDE + 1;

		// Circumcentres
		offset = i * 2;
		vec2 P1 = terrain_buffer.data[node_index].positions[index].xz;
		vec2 Q1 = terrain_buffer.data[node_index].positions[index + GRID_SIDE + 1].xz;
		vec2 R1 = terrain_buffer.data[node_index].positions[index + 1].xz;
		terrain_buffer.data[node_index].triangles[offset].circumcentre = find_circum_center(P1, Q1, R1);

		vec2 P2 = terrain_buffer.data[node_index].positions[index].xz;
		vec2 Q2 = terrain_buffer.data[node_index].positions[index + GRID_SIDE].xz;
		vec2 R2 = terrain_buffer.data[node_index].positions[index + GRID_SIDE + 1].xz;
		terrain_buffer.data[node_index].triangles[offset + 1].circumcentre = find_circum_center(P2, Q2, R2);

		// Circumradii
		terrain_buffer.data[node_index].triangles[offset].circumradius = find_circum_radius_squared(P1, Q1, R1);
		terrain_buffer.data[node_index].triangles[offset + 1].circumradius = find_circum_radius_squared(P2, Q2, R2);

		i += WORK_GROUP_SIZE;
	}
}
