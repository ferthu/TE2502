#version 450 core

#define TERRAIN_SET 0
#define TERRAIN_BINDING 0
#include "terrain_buffer.include"
#include "circumcircle.include"

#define WORK_GROUP_SIZE 1

layout(local_size_x = WORK_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform frame_data_t
{
	uint node_index;
} frame_data;



struct BorderEdge
{
	vec4 p1;
	vec4 p2;
	uint p1_index;
	uint p2_index;
	uint node_index;
	uint pad;
};

const uint max_border_edges = 100;
shared BorderEdge s_border_edges[max_border_edges * 3];


struct Edge
{
	uint p1;
	uint p2;
};
 
const uint max_triangles_to_remove = 50;
shared Edge s_edges[max_triangles_to_remove * 3];

shared uint s_triangles_to_remove[max_triangles_to_remove];
shared uint s_triangles_removed;
shared uint s_new_triangle_count;

shared uint s_index_count;
shared uint s_triangle_count;
shared uint s_vertex_count;

#define INVALID 9999999
#define EPSILON 1 - 0.0001



void remove_old_triangles(uint node_index)
{
	// Remove old triangles
	uint last_valid_triangle = s_triangle_count - 1;
	for (int j = int(s_triangles_removed) - 1; j >= 0; --j)
	{
		const uint index = s_triangles_to_remove[j];

		// Remove triangle
		if (index < last_valid_triangle)
		{
			terrain_buffer.data[node_index].indices[index * 3 + 0] = terrain_buffer.data[node_index].indices[last_valid_triangle * 3 + 0];
			terrain_buffer.data[node_index].indices[index * 3 + 1] = terrain_buffer.data[node_index].indices[last_valid_triangle * 3 + 1];
			terrain_buffer.data[node_index].indices[index * 3 + 2] = terrain_buffer.data[node_index].indices[last_valid_triangle * 3 + 2];
			terrain_buffer.data[node_index].triangles[index].circumcentre = terrain_buffer.data[node_index].triangles[last_valid_triangle].circumcentre;
			terrain_buffer.data[node_index].triangles[index].circumradius = terrain_buffer.data[node_index].triangles[last_valid_triangle].circumradius;
			terrain_buffer.data[node_index].triangles[index].circumradius2 = terrain_buffer.data[node_index].triangles[last_valid_triangle].circumradius2;

			// Move triangle indices
			for (uint bb = 0; bb < 4; ++bb)
			{
				uint count = terrain_buffer.data[node_index].border_count[bb];
				for (uint tt = 0; tt < count; ++tt)
				{
					if (terrain_buffer.data[node_index].border_triangle_indices[bb * max_border_triangle_count + tt] == last_valid_triangle)
						terrain_buffer.data[node_index].border_triangle_indices[bb * max_border_triangle_count + tt] = index;
				}
			}
		}

		--last_valid_triangle;
	}

	s_triangle_count -= s_triangles_removed;
	s_index_count = s_triangle_count * 3;
}

void remove_border_triangle_indices(uint node_index)
{
	for (int j = int(s_triangles_removed) - 1; j >= 0; --j)
	{
		const uint index = s_triangles_to_remove[j];

		// Check border triangles
		// TODO: Check if the cc for the triangle goes over a border, THEN find the correct index
		for (uint bb = 0; bb < 4; ++bb)
		{
			uint count = terrain_buffer.data[node_index].border_count[bb];
			for (uint tt = 0; tt < count; ++tt)
			{
				const uint triangle_index = bb * max_border_triangle_count + tt;
				if (terrain_buffer.data[node_index].border_triangle_indices[triangle_index] == index)
				{
					--count;
					// Replace the found index with data from the back of the array
					terrain_buffer.data[node_index].border_triangle_indices[triangle_index]
						= terrain_buffer.data[node_index].border_triangle_indices[bb * max_border_triangle_count + count];

					terrain_buffer.data[node_index].border_diffs[triangle_index]
						= terrain_buffer.data[node_index].border_diffs[bb * max_border_triangle_count + count];

					// Find the new max border diff
					float biggest = terrain_buffer.data[node_index].border_diffs[bb * max_border_triangle_count + 0];
					for (uint dd = 1; dd < count; ++dd)
					{
						const float temp = terrain_buffer.data[node_index].border_diffs[bb * max_border_triangle_count + dd];
						if (temp > biggest)
						{
							biggest = temp;
						}
					}
					terrain_buffer.data[node_index].border_max[bb] = biggest;
					--terrain_buffer.data[node_index].border_count[bb];
					break; // TODO: Add one more early exit for the other/outer for-loop?
				}
			}
		}
	}
}

void add_triangle_to_border(uint node_index, uint border_index, uint count, float diff)
{
	terrain_buffer.data[node_index].border_triangle_indices[border_index * max_border_triangle_count + count] = s_triangle_count;
	terrain_buffer.data[node_index].border_diffs[border_index * max_border_triangle_count + count] = diff;
	terrain_buffer.data[node_index].border_max[border_index] = max(terrain_buffer.data[node_index].border_max[border_index], diff);
	++terrain_buffer.data[node_index].border_count[border_index];
}

shared bool test;

void main(void)
{
	const uint thid = gl_GlobalInvocationID.x;

	const uint node_index = frame_data.node_index;

	const vec2 node_min = terrain_buffer.data[node_index].min;
	const vec2 node_max = terrain_buffer.data[node_index].max;
	const float side = node_max.x - node_min.x;

	////////////////////////////////////////
	// BORDER TRIANGULATION
	////////////////////////////////////////

	// Set shared variables
	if (thid == 0)
	{
		s_index_count = terrain_buffer.data[node_index].index_count;
		s_triangle_count = s_index_count / 3;
		s_triangles_removed = 0;
		s_vertex_count = terrain_buffer.data[node_index].vertex_count;
	}

	barrier();
	memoryBarrierShared();

	for (uint bb = 0; bb < 4; ++bb)
	{
		const uint new_points_count = min(terrain_buffer.data[node_index].new_border_point_count[bb], max_new_border_points);
		for (uint n = 0; n < new_points_count && bb * max_new_border_points + n < 4 * max_new_border_points; ++n)
		{
			const vec4 current_point = terrain_buffer.data[node_index].new_border_points[bb * max_new_border_points + n];

			const uint triangle_count = s_triangle_count;

			uint i = thid;
			while (i < triangle_count)
			{
				//const uint triangle_index = terrain_buffer.data[node_index].border_triangle_indices[bb * max_border_triangle_count + i];
				const vec2 circumcentre = terrain_buffer.data[node_index].triangles[i].circumcentre;
				const float circumradius2 = terrain_buffer.data[node_index].triangles[i].circumradius2;

				const float dx = current_point.x - circumcentre.x;
				const float dy = current_point.z - circumcentre.y;

				if (dx * dx + dy * dy < circumradius2)
				{
					// Add triangle edges to edge buffer
					const uint index0 = terrain_buffer.data[node_index].indices[i * 3 + 0];
					const uint index1 = terrain_buffer.data[node_index].indices[i * 3 + 1];
					const uint index2 = terrain_buffer.data[node_index].indices[i * 3 + 2];
					const vec4 p0 = terrain_buffer.data[node_index].positions[index0];
					const vec4 p1 = terrain_buffer.data[node_index].positions[index1];
					const vec4 p2 = terrain_buffer.data[node_index].positions[index2];

					// Store edges to be removed
					uint tr = atomicAdd(s_triangles_removed, 1);

					if (tr >= max_border_edges || tr >= max_triangles_to_remove)
						break;

					uint ec = tr * 3;
					// Edge 0
					bool biggest_point = p0.y < p1.y;
					s_border_edges[ec + 0].p1 = biggest_point ? p0 : p1;
					s_border_edges[ec + 0].p2 = !biggest_point ? p0 : p1;
					s_border_edges[ec + 0].p1_index = biggest_point ? index0 : index1;
					s_border_edges[ec + 0].p2_index = !biggest_point ? index0 : index1;
					s_border_edges[ec + 0].node_index = node_index;
					// Edge 1
					biggest_point = p1.y < p2.y;
					s_border_edges[ec + 1].p1 = biggest_point ? p1 : p2;
					s_border_edges[ec + 1].p2 = !biggest_point ? p1 : p2;
					s_border_edges[ec + 1].p1_index = biggest_point ? index1 : index2;
					s_border_edges[ec + 1].p2_index = !biggest_point ? index1 : index2;
					s_border_edges[ec + 1].node_index = node_index;
					// Edge 2
					biggest_point = p2.y < p0.y;
					s_border_edges[ec + 2].p1 = biggest_point ? p2 : p0;
					s_border_edges[ec + 2].p2 = !biggest_point ? p2 : p0;
					s_border_edges[ec + 2].p1_index = biggest_point ? index2 : index0;
					s_border_edges[ec + 2].p2_index = !biggest_point ? index2 : index0;
					s_border_edges[ec + 2].node_index = node_index;

					// Mark the triangle to be removed later
					s_triangles_to_remove[tr] = i;
				}

				i += WORK_GROUP_SIZE;
			}
			barrier();
			memoryBarrierShared();

			if (thid == 0)
			{
				test = false;
				// If the points was not within any border triangle then add it as a normal point to the node instead
				if (s_triangles_removed == 0)
				{
					test = true;
					if (terrain_buffer.data[node_index].new_points_count < num_new_points)
						terrain_buffer.data[node_index].new_points[terrain_buffer.data[node_index].new_points_count++] = current_point;
					//continue;  // TODO: Fix this
				}
			}
				
			barrier();
			memoryBarrierShared();


			if (!test)
			{
				// Delete all doubly specified edges from edge buffer (this leaves the edges of the enclosing polygon only)
				const uint edge_count = s_triangles_removed * 3;
				i = thid;
				while (i < edge_count)
				{
					bool found = false;
					for (uint j = 0; j < edge_count; ++j)
					{
						if (i != j &&
							s_border_edges[i].p1 == s_border_edges[j].p1 &&
							s_border_edges[i].p2 == s_border_edges[j].p2)
						{
							// Mark as invalid
							s_border_edges[j].p1.w = -1;
							found = true;
						}
					}
					if (found)
						s_border_edges[i].p1.w = -1;
					i += WORK_GROUP_SIZE;
				}

				barrier();
				memoryBarrierShared();

				// Count the number of new triangles to create
				if (thid == 0)
				{
					s_new_triangle_count = 0;

					for (uint j = 0; j < edge_count && j < max_triangles_to_remove * 3; ++j)
					{
						if (s_border_edges[j].p1.w > -0.5)
						{
							++s_new_triangle_count;
						}
					}
				}

				barrier();
				memoryBarrierShared();

				// If new triangles will not fit in index buffer, quit
				if (s_index_count + (s_new_triangle_count * 3) >= num_indices)
				{
					//finish = true;
					break;
				}

				if (thid == 0)
				{
					// Remove triangles from border triangle indices
					remove_border_triangle_indices(node_index);

					// Add to the triangle list all triangles formed between the point and the edges of the enclosing polygon
					for (uint i = 0; i < edge_count; ++i)
					{
						if (s_border_edges[i].p1.w > -0.5)
						{
							vec3 P = vec3(s_border_edges[i].p1);
							vec3 Q = vec3(s_border_edges[i].p2);
							vec3 R = vec3(current_point);

							vec2 PQ = normalize(vec2(Q.x, Q.z) - vec2(P.x, P.z));
							vec2 PR = normalize(vec2(R.x, R.z) - vec2(P.x, P.z));
							vec2 RQ = normalize(vec2(Q.x, Q.z) - vec2(R.x, R.z));

							float d1 = abs(dot(PQ, PR));
							float d2 = abs(dot(PR, RQ));
							float d3 = abs(dot(RQ, PQ));

							// Skip this triangle because it is too narrow (should only happen at borders)
							if (d1 > EPSILON || d2 > EPSILON || d3 > EPSILON)
							{
								continue;
							}

							// Make sure winding order is correct
							vec3 n = cross(R - P, Q - P);
							if (n.y > 0)
							{
								vec4 temp = s_border_edges[i].p1;
								s_border_edges[i].p1 = s_border_edges[i].p2;
								s_border_edges[i].p2 = temp;
								uint temp2 = s_border_edges[i].p1_index;
								s_border_edges[i].p1_index = s_border_edges[i].p2_index;
								s_border_edges[i].p2_index = temp2;
							}

							// Set indices for the new triangle
							terrain_buffer.data[s_border_edges[i].node_index].indices[s_index_count + 0] = s_border_edges[i].p1_index;
							terrain_buffer.data[s_border_edges[i].node_index].indices[s_index_count + 1] = s_border_edges[i].p2_index;
							terrain_buffer.data[s_border_edges[i].node_index].indices[s_index_count + 2] = s_vertex_count;

							// Set circumcircles for the new triangle
							float a = distance(vec2(P.x, P.z), vec2(Q.x, Q.z));
							float b = distance(vec2(P.x, P.z), vec2(R.x, R.z));
							float c = distance(vec2(R.x, R.z), vec2(Q.x, Q.z));

							const vec2 cc_center = find_circum_center(vec2(P.x, P.z), vec2(Q.x, Q.z), vec2(R.x, R.z));
							const float cc_radius2 = find_circum_radius_squared(a, b, c);
							const float cc_radius = sqrt(cc_radius2);

							terrain_buffer.data[s_border_edges[i].node_index].triangles[s_triangle_count].circumcentre = cc_center;
							terrain_buffer.data[s_border_edges[i].node_index].triangles[s_triangle_count].circumradius = cc_radius;
							terrain_buffer.data[s_border_edges[i].node_index].triangles[s_triangle_count].circumradius2 = cc_radius2;

							// Check if the triangle is a border triangle
							// Left
							uint count = terrain_buffer.data[s_border_edges[i].node_index].border_count[3];
							float diff = node_min.x + cc_radius - cc_center.x;
							if (diff > 0 && count < max_border_triangle_count)
							{
								add_triangle_to_border(s_border_edges[i].node_index, 3, count, diff);
							}
							// Right
							count = terrain_buffer.data[s_border_edges[i].node_index].border_count[1];
							diff = cc_center.x + cc_radius - node_max.x;
							if (diff > 0 && count < max_border_triangle_count)
							{
								add_triangle_to_border(s_border_edges[i].node_index, 1, count, diff);
							}
							// Top
							count = terrain_buffer.data[s_border_edges[i].node_index].border_count[0];
							diff = cc_center.y + cc_radius - node_max.y;
							if (diff > 0 && count < max_border_triangle_count)
							{
								add_triangle_to_border(s_border_edges[i].node_index, 0, count, diff);
							}
							// Bottom
							count = terrain_buffer.data[s_border_edges[i].node_index].border_count[2];
							diff = node_min.y + cc_radius - cc_center.y;
							if (diff > 0 && count < max_border_triangle_count)
							{
								add_triangle_to_border(s_border_edges[i].node_index, 2, count, diff);
							}

							s_index_count += 3;
							++s_triangle_count;
						}
					}

					remove_old_triangles(node_index);

					// Insert new point
					terrain_buffer.data[node_index].positions[s_vertex_count] = current_point;
					++s_vertex_count;

					s_triangles_removed = 0;
				}
			}

			barrier();
			memoryBarrierShared();
			memoryBarrierBuffer();
		}
		terrain_buffer.data[node_index].new_border_point_count[bb] = 0;
	}

























	if (terrain_buffer.data[node_index].new_points_count == 0)
	{
		terrain_buffer.data[node_index].vertex_count = s_vertex_count;
		terrain_buffer.data[node_index].index_count = s_index_count;
		return;
	}
	////////////////////////////////////////
	// NORMAL TRIANGULATION
	////////////////////////////////////////

	barrier();
	memoryBarrierShared();
	memoryBarrierBuffer();

	// Set shared variables
	if (thid == 0)
	{
		//s_index_count = terrain_buffer.data[node_index].index_count;
		//s_triangle_count = s_index_count / 3;
		//s_triangles_removed = 0;
		//s_vertex_count = terrain_buffer.data[node_index].vertex_count;
	}

	barrier();
	memoryBarrierShared();

	bool finish = false;

	uint new_points_count = terrain_buffer.data[node_index].new_points_count;
	for (uint n = 0; n < new_points_count && s_vertex_count < num_vertices && !finish; ++n)
	{
		vec4 current_point = terrain_buffer.data[node_index].new_points[n];

		// Check distance from circumcircles to new point
		uint i = thid;
		while (i < s_triangle_count)
		{
			const vec2 circumcentre = terrain_buffer.data[node_index].triangles[i].circumcentre;
			const float circumradius2 = terrain_buffer.data[node_index].triangles[i].circumradius2;

			const float dx = current_point.x - circumcentre.x;
			const float dy = current_point.z - circumcentre.y;
			if (dx * dx + dy * dy < circumradius2)
			{
				// Add triangle edges to edge buffer
				uint tr = atomicAdd(s_triangles_removed, 1);

				if (tr >= max_triangles_to_remove)
					break;

				uint ec = tr * 3; //atomicAdd(s_edge_count, 3);
				uint index_offset = i * 3;
				uint index0 = terrain_buffer.data[node_index].indices[index_offset + 0];
				uint index1 = terrain_buffer.data[node_index].indices[index_offset + 1];
				uint index2 = terrain_buffer.data[node_index].indices[index_offset + 2];


				// Edge 1
				s_edges[ec + 0].p1 = min(index0, index1);
				s_edges[ec + 0].p2 = max(index0, index1);
				// Edge 2
				s_edges[ec + 1].p1 = min(index1, index2);
				s_edges[ec + 1].p2 = max(index1, index2);
				// Edge 3
				s_edges[ec + 2].p1 = min(index2, index0);
				s_edges[ec + 2].p2 = max(index2, index0);

				// Mark the triangle to be removed later
				s_triangles_to_remove[tr] = i;
			}

			i += WORK_GROUP_SIZE;
		}
		barrier();
		memoryBarrierShared();

		// Delete all doubly specified edges from edge buffer (this leaves the edges of the enclosing polygon only)
		const uint edge_count = min(s_triangles_removed, max_triangles_to_remove) * 3;
		i = thid;
		while (i < edge_count)
		{
			bool found = false;
			for (uint j = 0; j < edge_count; ++j)
			{
				if (i != j &&
					s_edges[i].p1 == s_edges[j].p1 &&
					s_edges[i].p2 == s_edges[j].p2)
				{
					// Mark as invalid
					s_edges[j].p1 = INVALID;
					found = true;
				}
			}
			if (found)
				s_edges[i].p1 = INVALID;
			i += WORK_GROUP_SIZE;
		}

		barrier();
		memoryBarrierShared();

		// Count the number of new triangles to create
		if (thid == 0)
		{
			s_new_triangle_count = 0;

			for (uint j = 0; j < edge_count && j < max_triangles_to_remove * 3; ++j)
			{
				if (s_edges[j].p1 != INVALID)
				{
					++s_new_triangle_count;
				}
			}
		}

		barrier();
		memoryBarrierShared();

		// If new triangles will not fit in index buffer, quit
		if (s_index_count + (s_new_triangle_count * 3) >= num_indices)
		{
			finish = true;
			break;
		}


		if (thid == 0)
		{
			// Remove triangles from border triangle indices
			remove_border_triangle_indices(node_index);

			// Add to the triangle list all triangles formed between the point and the edges of the enclosing polygon
			for (uint i = 0; i < edge_count; ++i)
			{
				if (s_edges[i].p1 != INVALID)
				{
					vec3 P = vec3(terrain_buffer.data[node_index].positions[s_edges[i].p1]);
					vec3 Q = vec3(terrain_buffer.data[node_index].positions[s_edges[i].p2]);
					vec3 R = vec3(current_point);

					vec2 PQ = normalize(vec2(Q.x, Q.z) - vec2(P.x, P.z));
					vec2 PR = normalize(vec2(R.x, R.z) - vec2(P.x, P.z));
					vec2 RQ = normalize(vec2(Q.x, Q.z) - vec2(R.x, R.z));

					float d1 = abs(dot(PQ, PR));
					float d2 = abs(dot(PR, RQ));
					float d3 = abs(dot(RQ, PQ));

					// Skip this triangle because it is too narrow (should only happen at borders)
					if (d1 > EPSILON || d2 > EPSILON || d3 > EPSILON)
					{
						continue;
					}

					// Make sure winding order is correct
					vec3 n = cross(R - P, Q - P);
					if (n.y > 0)
					{
						uint temp = s_edges[i].p1;
						s_edges[i].p1 = s_edges[i].p2;
						s_edges[i].p2 = temp;
					}

					// Set indices for the new triangle
					terrain_buffer.data[node_index].indices[s_index_count + 0] = s_edges[i].p1;
					terrain_buffer.data[node_index].indices[s_index_count + 1] = s_edges[i].p2;
					terrain_buffer.data[node_index].indices[s_index_count + 2] = s_vertex_count;

					// Set circumcircles for the new triangle
					float a = distance(vec2(P.x, P.z), vec2(Q.x, Q.z));
					float b = distance(vec2(P.x, P.z), vec2(R.x, R.z));
					float c = distance(vec2(R.x, R.z), vec2(Q.x, Q.z));

					const vec2 cc_center = find_circum_center(vec2(P.x, P.z), vec2(Q.x, Q.z), vec2(R.x, R.z));
					const float cc_radius2 = find_circum_radius_squared(a, b, c);
					const float cc_radius = sqrt(cc_radius2);

					terrain_buffer.data[node_index].triangles[s_triangle_count].circumcentre = cc_center;
					terrain_buffer.data[node_index].triangles[s_triangle_count].circumradius = cc_radius;
					terrain_buffer.data[node_index].triangles[s_triangle_count].circumradius2 = cc_radius2;

					// Check if the triangle is a border triangle
					// Left
					uint count = terrain_buffer.data[node_index].border_count[3];
					float diff = node_min.x + cc_radius - cc_center.x;
					if (diff > 0 && count < max_border_triangle_count)
					{
						add_triangle_to_border(node_index, 3, count, diff);
					}
					// Right
					count = terrain_buffer.data[node_index].border_count[1];
					diff = cc_center.x + cc_radius - node_max.x;
					if (diff > 0 && count < max_border_triangle_count)
					{
						add_triangle_to_border(node_index, 1, count, diff);
					}
					// Top
					count = terrain_buffer.data[node_index].border_count[0];
					diff = cc_center.y + cc_radius - node_max.y;
					if (diff > 0 && count < max_border_triangle_count)
					{
						add_triangle_to_border(node_index, 0, count, diff);
					}
					// Bottom
					count = terrain_buffer.data[node_index].border_count[2];
					diff = node_min.y + cc_radius - cc_center.y;
					if (diff > 0 && count < max_border_triangle_count)
					{
						add_triangle_to_border(node_index, 2, count, diff);
					}

					s_index_count += 3;
					++s_triangle_count;
				}
			}

			remove_old_triangles(node_index);

			// Insert new point
			terrain_buffer.data[node_index].positions[s_vertex_count] = current_point;
			++s_vertex_count;

			s_triangles_removed = 0;
		}

		barrier();
		memoryBarrierShared();
		memoryBarrierBuffer();
	}

	// Write new buffer lenghts to buffer
	if (thid == 0)
	{
		terrain_buffer.data[node_index].vertex_count = s_vertex_count;
		terrain_buffer.data[node_index].index_count = s_index_count;

		terrain_buffer.data[node_index].new_points_count = 0;
	}
}
