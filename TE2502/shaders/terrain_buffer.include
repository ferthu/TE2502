const uint num_indices = TERRAIN_GENERATE_NUM_INDICES;
const uint num_vertices = TERRAIN_GENERATE_NUM_VERTICES;
const uint num_nodes = TERRAIN_GENERATE_NUM_NODES;
const uint num_new_points = TRIANGULATE_MAX_NEW_NORMAL_POINTS;
const uint quadtree_levels = QUADTREE_LEVELS;
const uint max_new_border_points = TRIANGULATE_MAX_NEW_BORDER_POINTS;
const uint max_border_triangle_count = MAX_BORDER_TRIANGLE_COUNT;

struct Triangle
{
	vec2 circumcentre;
	float circumradius;
	float circumradius2;
};

struct terrain_data_t
{
	uint index_count;
	uint instance_count;
	uint first_index;
	int  vertex_offset;
	uint first_instance;

	// struct BufferNodeHeader {
		uint vertex_count;
		uint new_points_count;
		uint pad;

		vec2 min;
		vec2 max;
		
		uint new_border_point_count[4];
		vec4 new_border_points[4u * max_new_border_points];
		uint border_count[4];
		uint border_triangle_indices[4u * max_border_triangle_count];
		float border_max[4];
		float border_diffs[4u * max_border_triangle_count];
	// }

	uint indices[num_indices];
	vec4 positions[num_vertices];
	Triangle triangles[num_indices / 3u];
	vec4 new_points[num_new_points];
};

const uint quadtree_data_size = (1u << quadtree_levels) * (1u << quadtree_levels) + 4u;
const uint pad_size = 16u - (quadtree_data_size % 16u);

coherent layout(set = TERRAIN_SET, binding = TERRAIN_BINDING) buffer terrain_buffer_t
{
	uint quadtree_index_map[(1 << quadtree_levels) * (1 << quadtree_levels)];
	vec2 quadtree_min;
	vec2 quadtree_max;
	uint pad[pad_size];
	terrain_data_t data[num_nodes];
} terrain_buffer;
