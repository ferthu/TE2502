// Mountains. By David Hoskins - 2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

#version 450 core

#include "terrain.include"

#define WIDTH 1080
#define HEIGHT 720
#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;
layout(push_constant) uniform frame_data_t
{
	mat4 view;
	vec4 position;
	vec2 screen_size;
} frame_data;

layout(set = 0, binding = 0, rgba8) uniform image2D image; 



//--------------------------------------------------------------------------
float binary_subdivision(in vec3 rO, in vec3 rD, in vec2 t, in int divisions)
{
	// Home in on the surface by dividing by two and split...
	float halfway_t;

	for (int i = 0; i < divisions; i++)
	{
		halfway_t = dot(t, vec2(.5));
		float d = height_to_surface(rO + halfway_t * rD);
		t = mix(vec2(t.x, halfway_t), vec2(halfway_t, t.y), step(0.5, d));
	}
	return halfway_t;
}

//--------------------------------------------------------------------------
bool ray_march(in vec3 rO, in vec3 rD, out float resT)
{
	float t = 0.01;
	float oldT = 0.0;
	float delta = 0.0;
	bool fin = false;
	vec2 distances;
	while (!fin && t < 350)
	{
		//if (fin || t > 14000.0) break;
		vec3 p = rO + t * rD;
		float h = height_to_surface(p); // ...Get this positions height mapping.
		// Are we inside, and close enough to fudge a hit?...
		if (h < 0.5)
		{
			fin = true;
			distances = vec2(oldT, t);
			break;
		}
		// Delta ray advance - a fudge between the height returned
		// and the distance already travelled.
		// It's a really fiddly compromise between speed and accuracy
		// Too large a step and the tops of ridges get missed.
		delta = max(0.1, 0.2*h) + (t*0.0025);
		oldT = t;
		t += delta;
	}
	if (fin) resT = binary_subdivision(rO, rD, distances, 10);

	return fin;
}

//--------------------------------------------------------------------------
void main(void)
{
	if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
		return;

	const float deg_to_rad = 3.1415 / 180.0;
	const float fov = 90.0;	// In degrees
	float px = (2 * ((gl_GlobalInvocationID.x + 0.5) / frame_data.screen_size.x) - 1) * tan(fov / 2.0 * deg_to_rad);
	float py = (2 * ((gl_GlobalInvocationID.y + 0.5) / frame_data.screen_size.y) - 1) * tan(fov / 2.0 * deg_to_rad) * frame_data.screen_size.y / frame_data.screen_size.x;
	vec3 rd = vec3(px, py, 1);
	rd = (frame_data.view * vec4(normalize(rd), 0.0)).xyz;

	vec3 position = frame_data.position.xyz;

	vec3 color;
	float distance;
	if (!ray_march(position, rd, distance))
	{
		// Missed scene, now just get the sky value...
		color = GetSky(rd);
	}
	else
	{
		// Get world coordinate of landscape...
		vec3 pos = position + distance * rd;
		// Get normal from sampling the high definition height map
		// Use the distance to sample larger gaps to help stop aliasing...
		float p = min(.3, .0005 + .00005 * distance*distance);
		vec3 nor = vec3(0.0, terrain2(pos.xz), 0.0);
		vec3 v2 = nor - vec3(p, terrain2(pos.xz + vec2(p, 0.0)), 0.0);
		vec3 v3 = nor - vec3(0.0, terrain2(pos.xz + vec2(0.0, -p)), -p);
		nor = cross(v2, v3);
		nor = normalize(nor);

		// Get the colour using all available data...
		color = surface_color(pos, nor, distance, position);
	}

	color = post_effects(color);

	imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}

